"""
hatch-pip-compile header operations
"""

import pathlib
import re
from dataclasses import dataclass
from textwrap import dedent
from typing import List, Optional

from hatch.env.virtual import VirtualEnv
from packaging.version import Version


@dataclass
class PipCompileHeader:
    """
    Header Metadata
    """

    lock_file: pathlib.Path
    dependencies: List[str]
    project_root: pathlib.Path
    constraints_file: Optional[pathlib.Path]
    env_name: str
    project_name: str
    virtualenv: Optional[VirtualEnv] = None

    def write_header(self) -> None:
        """
        Post process lockfile
        """
        version = f"{self.python_version.major}.{self.python_version.minor}"
        raw_prefix = f"""
        #
        # This file is autogenerated by hatch-pip-compile with Python {version}
        #
        """
        prefix = dedent(raw_prefix).strip()
        joined_dependencies = "\n".join([f"# - {dep}" for dep in self.dependencies])
        lockfile_text = self.lock_file.read_text()
        cleaned_input_file = re.sub(
            rf"-r \S*/{self.env_name}\.in",
            f"hatch.envs.{self.env_name}",
            lockfile_text,
        )
        if self.constraints_file is not None:
            constraints_path = self.constraints_file.relative_to(self.project_root)
            constraints_line = f"# [constraints] {constraints_path}"
            joined_dependencies = "\n".join([constraints_line, "#", joined_dependencies])
            cleaned_input_file = re.sub(
                r"-c \S*",
                f"-c {constraints_path}",
                cleaned_input_file,
            )
        prefix += "\n" + joined_dependencies + "\n#"
        new_text = prefix + "\n\n" + cleaned_input_file
        self.lock_file.write_text(new_text)

    def read_requirements(self) -> List[str]:
        """
        Read requirements from lock file
        """
        lock_file_text = self.lock_file.read_text()
        parsed_requirements = []
        for line in lock_file_text.splitlines():
            if line.startswith("# - "):
                rest_of_line = line[4:]
                parsed_requirements.append(rest_of_line)
            elif not line.startswith("#"):
                break
        return parsed_requirements

    @property
    def python_version(self) -> Version:
        """
        Get python version
        """
        if self.virtualenv is not None:
            return Version(self.virtualenv.environment["python_version"])
        else:
            msg = "VirtualEnv is not set"
            raise NotImplementedError(msg)
