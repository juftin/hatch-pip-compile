[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
authors = [
  {name = "Justin Flannery", email = "juftin@juftin.com"}
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Framework :: Hatch",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy"
]
dependencies = [
  "hatch>=1.7.0"
]
description = "hatch plugin to use pip-compile to manage project dependencies"
dynamic = ["version"]
license = "MIT"
name = "hatch-pip-compile"
readme = "README.md"
requires-python = ">=3.8"

[project.entry-points.hatch]
hatch-pip-compile = "hatch_pip_compile.hooks"

[project.urls]
Documentation = "https://juftin.github.io/hatch-pip-compile"
Issues = "https://juftin.github.io/hatch-pip-compile/issues"
Source = "https://github.com/juftin/hatch-pip-compile"

[tool.coverage.paths]
hatch_pip_compile = ["hatch_pip_compile", "*/hatch-pip-compile/hatch_pip_compile"]
tests = ["tests", "*/hatch-pip-compile/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:"
]
show_missing = true

[tool.coverage.run]
branch = true
omit = [
  "hatch_pip_compile/__about__.py",
  "hatch_pip_compile/hooks.py"
]
parallel = true
source_pkgs = ["hatch_pip_compile", "tests"]

[tool.hatch.env]
requires = ["hatch-mkdocs"]

[tool.hatch.env.collectors.mkdocs.docs]
path = "mkdocs.yaml"

[tool.hatch.envs.default]
pip-compile-constraint = "default"
post-install-commands = [
  "- pre-commit install"
]
python = "3.11"
type = "pip-compile"

[tool.hatch.envs.docs]
detached = false
type = "pip-compile"

[tool.hatch.envs.gen]
detached = true

[tool.hatch.envs.gen.scripts]
release = [
  "npm install --prefix .github/semantic_release/",
  "npx --prefix .github/semantic_release/ semantic-release {args:}"
]

[tool.hatch.envs.lint]
dependencies = [
  "mypy>=1.6.1",
  "ruff~=0.1.4"
]
detached = true
type = "pip-compile"

[tool.hatch.envs.lint.scripts]
all = [
  "style",
  "typing"
]
fmt = [
  "ruff format {args:.}",
  "ruff --fix {args:.}",
  "style"
]
precommit = [
  "pre-commit run --all-files"
]
style = [
  "ruff {args:.}",
  "ruff format --check --diff {args:.}"
]
typing = "mypy --install-types --non-interactive {args:hatch_pip_compile}"

[tool.hatch.envs.matrix]
template = "test"

[[tool.hatch.envs.matrix.matrix]]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.test]
dependencies = [
  "pytest",
  "pytest-cov",
  "tomlkit"
]

[tool.hatch.envs.test.scripts]
cov = [
  "pytest --cov-config=pyproject.toml --cov {args: tests/ -v}"
]

[tool.hatch.envs.versions]
dependencies = []
pip-compile-constraint = ""
template = "test"
type = "pip-compile"

[[tool.hatch.envs.versions.matrix]]
version = [
  "1.7.x",
  "1.8.x",
  "1.9.x"
]

[tool.hatch.envs.versions.overrides]
matrix.version.dependencies = [
  "pytest",
  "pytest-cov",
  "tomlkit",
  {value = "hatch~=1.7.0", if = ["1.7.x"]},
  {value = "hatch~=1.8.0", if = ["1.8.x"]},
  {value = "hatch~=1.9.0", if = ["1.9.x"]}
]

[tool.hatch.version]
path = "hatch_pip_compile/__about__.py"

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
  "pytest.*",
  "piptools.*",
  "hatch.*",
  "hatchling.*",
  "packaging.*"
]

[tool.ruff]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
  # Prefer `next(iter(mock_check_command.call_args))`
  "RUF015"
]
line-length = 100
select = [
  "A",  # flake8-builtins
  "ARG",  # flake8-unused-arguments
  "B",  # flake8-bugbear
  "C",  # mccabe
  "DTZ",  # flake8-datetimez
  "E",  # pycodestyle (Error)
  "EM",  # flake8-errmsg
  "F",  # Pyflakes
  "FBT",  # flake8-boolean-trap
  "I",  # isort
  "ICN",  # flake8-import-conventions
  "N",  # pep8-naming
  "PLC",  # Pylint (Convention message)
  "PLE",  # Pylint (Error message)
  "PLR",  # Pylint (Refactor message)
  "PLW",  # Pylint (Warning message)
  "Q",  # flake8-quotes
  "RUF",  # Ruff-specific rules
  "S",  # flake8-bandit
  "T",  # flake8-debugger (T10) and flake8-print (T20)
  "TID",  # flake8-tidy-imports
  "UP",  # pyupgrade
  "W",  # pycodestyle (Warning)
  "YTT"  # flake8-2020
]
target-version = "py38"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.isort]
known-first-party = ["hatch_pip_compile"]

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, relative imports, and unused arguments
"tests/**/*" = ["PLR2004", "S101", "TID252", "ARG001"]

[tool.ruff.pydocstyle]
convention = "numpy"
